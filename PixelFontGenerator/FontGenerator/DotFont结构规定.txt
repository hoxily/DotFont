拟定DotFont结构如下:
2014-04-26T00:01+0800,修正。
struct DotFont
{
	byte FontInformation[256];//允许任意字符集,但是在解析时因为不知道字符编码,可能会出错.建议UTF-8编码,渣渣ANSI MBCS去死吧！
	byte WidthInPixel;//简称Width,0~255 ,其中0表示256,因为0没有意义。
	byte HeightInPixel;//简称Height,0~255,意义同上.
	//因为点阵字体的长宽并不需要非常大，反以256的长宽足够了。如果需要很大的字体,建议用矢量字体.
	byte BitMask[2^16*fa(Width/8.0)*Height];
	//注意此处,fa(x)函数表示大于或等于x的最小整数.上取整.
	//这里存储每个字符的位掩码信息.按顺序的从0000H~FFFFH的65536个UNICODE字符的掩码信息.
	//一个字符的点阵图数据结束,就是另一个字符的开始.
	//每个字符的点阵图形被切割成Height行.每一行用fa(Width/8.0)个8Bit表示.
	//当Width不能被8整除时,每行将会产生1~7Bit的浪费,用0填充浪费了的Bit位.当其能被整除时,没有填充浪费.
	//每一个像素用1Bit表示.0表示底色.1表示前景色.
	//图像是从左向右，从上到下的顺序进行编码。编码时依次使用每个byte的最高有效位到最低有效位。
}